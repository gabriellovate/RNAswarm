#!/usr/bin/env python3

"""parse_peaks.py

This script takes an annotation table, a genome file (fasta format) and one or more trns files, and returns a table with the annotation and the peak base pair for each interaction.
The annotation table must have the following columns: id,segment01,start01,end01,segment02,start02,end02

Usage:
    parse_peaks.py <input_file> <input_file>... -a <annotation_table> -g <genome> -o <output_file> [--stdout]
    parse_peaks.py <input_file> -a <annotation_table> -g <genome> -o <output_file> [--stdout]
    parse_peaks.py -h | --help

Options:
    -h --help                                 Show this screen.
    <input_file>                              The input files to process, has to be a trns file generated by segemehl.
    -a --annotation_table=<annotation_table>  The annotation table filepath.
    -g --genome=<genome>                      The genome filepath.
    -o --output=<output_file>                 The output directory.
"""

from docopt import docopt
import os
import pandas as pd
import helper as hp
import trns_handler as th
import array_handler as ah

def main():
    args = docopt(__doc__)
    input_files = args["<input_file>"]
    annotation_table = args["--annotation_table"]
    genome = args["--genome"]

    # Parse annotation table
    annotation_table = pd.read_csv(annotation_table, sep=",", header=0)

    # Parse genome file
    genome_dict = hp.parse_fasta(genome)
    combination_arrays = {}

    # Check if trns_files is a list or a single file
    if isinstance(input_files, str):
        trns_file_name = os.path.basename(trns_file)
        trns_file_name = trns_file_name.split(".")[0]

        # Create and fill combination arrays
        combination_arrays[trns_file_name] = hp.make_combination_array(genome_dict)
        th.segemehlTrans2heatmap(trns_file, combination_arrays[trns_file_name])
        merged_combination_arrays = combination_arrays

    if isinstance(input_files, list):
        for trns_file in input_files:
            # Get the name of the current trns file
            trns_file_name = os.path.basename(trns_file)
            trns_file_name = trns_file_name.split(".")[0]

            # Create and fill combination arrays
            combination_arrays[trns_file_name] = hp.make_combination_array(genome_dict)
            th.segemehlTrans2heatmap(trns_file, combination_arrays[trns_file_name])

        # Merge combination arrays
        merged_combination_arrays = ah.combine_arrays(
            combination_arrays, normalise_array=False
        )
    
    # Check the peak cell for each annotation
    peak_cell_dict = {}
    for index, row in annotation_table.iterrows():
        peak_cel = ah.get_peak_cell_from_annotation_table(merged_combination_arrays, row, genome_dict)
        peak_cell_dict[index] = peak_cel
        # make peak cell dict into a dataframe
        peak_cell_df = pd.DataFrame.from_dict(peak_cell_dict, orient="index")

    # Merge the peak cell dataframe with the annotation table
    merged_df = pd.merge(annotation_table, peak_cell_df, left_index=True, right_index=True)

    # Check if the output directory exists, if not create it
    if not os.path.exists(args["--output"]):
        os.makedirs(args["--output"])

    # save the merged dataframe to a file inside the output directory with the naming convention: <genome_file_name>_peak_cells.csv
    if args["--stdout"]:
        print(merged_df.to_csv(sep=",", index=False))
    else:
        output_file = os.path.basename(genome)
        output_file = output_file.split(".")[0]
        output_file = args["--output"] + "/" + output_file + "_peak_cells.csv"
        merged_df.to_csv(output_file, sep=",", index=False)


if __name__ == "__main__":
    main()
