#!/usr/bin/env python3

"""parse_peaks.py

This script takes an annotation table, a genome file (fasta format) and one or more trns files, and returns a table with the annotation and the peak base pair for each interaction.
The annotation table must have the following columns: id,segment01,start01,end01,segment02,start02,end02

Usage:
    parse_interactions.py <input_file> <input_file>... -a <annotation_table> -g <genome> -o <output_file> [--stdout]

Options:
    -h --help                                 Show this screen.
    <input_file>                              The input files to process, has to be a trns file generated by segemehl.
    -a --annotation_table=<annotation_table>  The annotation table filepath.
    -g --genome=<genome>                      The genome filepath.
    -o --output=<output_file>                 The output filepath.
"""

from docopt import docopt
import os
import pandas as pd
import helper as hp
import trns_handler as th
import array_handler as ah

def main():
    args = docopt(__doc__)
    input_files = args["<input_file>"]
    annotation_table = args["--annotation_table"]
    genome = args["--genome"]
    output_file = args["--output"]
    stdout = args["--stdout"]

    # Parse annotation table
    annotation_table = pd.read_csv(annotation_table, sep="\t", header=0)

    # Parse genome file
    genome_dict = hp.parse_fasta(genome)
    combination_arrays = {}

    # Check if trns_files is a list or a single file
    if isinstance(input_files, str):
        trns_file_name = os.path.basename(trns_file)
        trns_file_name = trns_file_name.split(".")[0]

        # Create and fill combination arrays
        combination_arrays[trns_file_name] = hp.make_combination_array(genome_dict)
        th.segemehlTrans2heatmap(trns_file, combination_arrays[trns_file_name])
        merged_combination_arrays = combination_arrays
    
    elif isinstance(input_files, list):
        for trns_file in input_files:
            # Get the name of the current trns file
            trns_file_name = os.path.basename(trns_file)
            trns_file_name = trns_file_name.split(".")[0]

            # Create and fill combination arrays
            combination_arrays[trns_file_name] = hp.make_combination_array(genome_dict)
            th.segemehlTrans2heatmap(trns_file, combination_arrays[trns_file_name])

        # Merge combination arrays
        merged_combination_arrays = ah.combine_arrays(
            combination_arrays, normalise_array=False
        )

    # Check the peak cell for each annotation
    for index, row in annotation_table.iterrows():
        peak_cell = ah.get_peak_cell(merged_combination_arrays, row)
        annotation_table.loc[index, "peak_cell"] = peak_cell


    # Write output file
    
    

if __name__ == "__main__":
    main()
