#!/usr/bin/env python3

"""sam_handler.py

sam_handler.py is a script to extract SPLASH-generated spliced reads from a BAM file generated by segemehl.
It outputs a tab-delimited file with the following columns: ref-chr, ref-pos, ref-strand, start-in-read, align-length, algin-edist, score.
The file is similar to the output of segemehl's trns command, but it contains only spliced reads that are within the same segment/chromosome.

Usage:
    sam_handler.py --sam <sam_file> --sngl <sngl_bed_file> -g <genome> -o <output_folder>
    sam_handler.py -h | --help

Options:
    -h --help                    Show this screen.
    --sam=<sam_file>             Path to SAM file
    --sngl=<sngl_bed_file>       Path to .sngl.bed file from segemehl
    -g --genome=<genome>         The genome filepath.
    -o --output=<output_folder>  The output folder.
"""

from docopt import docopt
import pysam
import os
import numpy as np
import pandas as pd
import helper as hp
import plot_heatmaps as ph
import trns_handler as th


def get_read_ids(bed_file):
    """
    Get read IDs from .sngl.bed file

    Parameters
    ----------
    bed_file : str
        Path to .sngl.bed file

    Returns
    -------
    read_ids : list
        List of read IDs
    """

    read_ids = []

    with open(bed_file, "r") as f:
        for line in f:
            # ignore bed file header
            if line.startswith("#"):
                continue
            elif line.startswith("browser"):
                continue
            elif line.startswith("track"):
                continue
            # get read ID
            else:
                read_id = line.split("\t")[3]
                read_id = read_id.split(";")[2]
                read_ids.append(read_id)

    return read_ids


def get_intra_segment_chimeras(read_ids, sam_file):
    """
    Get intra-segment chimeras from SAM file

    Parameters
    ----------
    read_ids : list
        List of read IDs
    sam_file : pysam.AlignmentFile
        SAM file
    output_file : str
        Path to output file

    Returns
    -------
    split_reads : dict
        Dictionary of split reads
    """
    split_reads = {}
    # Iterate over mapped reads in SAM file
    for read in sam_file.fetch():
        if read.is_unmapped:
            continue
        # Check if read ID is in list of read IDs
        if read.query_name in read_ids:
            # Check if read_id is already in dictionary
            if read.query_name in split_reads:
                split_reads[read.query_name].append(read)
            else:
                split_reads[read.query_name] = [read]

    return split_reads


def split_read_to_interaction(split_read_list):
    """
    Convert split read to interaction

    Parameters
    ----------
    split_read_list : list
        List of pysam.AlignedSegment objects

    Returns
    -------
    interaction : list
        List of interactions
    """
    interaction = []
    if len(split_read_list) == 2:
        # Check which read starts first
        if split_read_list[0].reference_start < split_read_list[1].reference_start:
            # Get chromosome 1
            interaction.append(split_read_list[0].reference_name)
            # Get start position 1
            interaction.append(split_read_list[0].reference_start + 1)
            # Get end position 1
            interaction.append(split_read_list[0].reference_end + 1)
            # Get chromosome 2
            interaction.append(split_read_list[1].reference_name)
            # Get start position 2
            interaction.append(split_read_list[1].reference_start + 1)
            # Get end position 2
            interaction.append(split_read_list[1].reference_end + 1)
        else:
            # Get chromosome 1
            interaction.append(split_read_list[1].reference_name)
            # Get start position 1
            interaction.append(split_read_list[1].reference_start + 1)
            # Get end position 1
            interaction.append(split_read_list[1].reference_end + 1)
            # Get chromosome 2
            interaction.append(split_read_list[0].reference_name)
            # Get start position 2
            interaction.append(split_read_list[0].reference_start + 1)
            # Get end position 2
            interaction.append(split_read_list[0].reference_end + 1)
    elif len(split_read_list) == 1:
        # Parse the CIGAR string
        cigar_tuples = split_read_list[0].cigartuples
        # Get chromosome 1
        interaction.append(split_read_list[0].reference_name)
        # Get start position 1
        interaction.append(split_read_list[0].reference_start + 1)
        # Get end position 1
        # From start of cigar string to first N
        for i in range(len(cigar_tuples)):
            if cigar_tuples[i][0] == 3:
                interaction.append(
                    split_read_list[0].reference_start + cigar_tuples[i][1] + 1
                )
                break
        # Get chromosome 2
        interaction.append(split_read_list[0].reference_name)
        # Get start position 2
        # From end of cigar string to last N
        for i in range(len(cigar_tuples) - 1, -1, -1):
            if cigar_tuples[i][0] == 3:
                interaction.append(
                    split_read_list[0].reference_start + cigar_tuples[i][1] + 1
                )
                break
        # Get end position 2
        interaction.append(split_read_list[0].reference_end + 1)

    return interaction


def segemehlSngl2heatmap(sngl_file, sam_file, interaction_arrays, min_gap=50):
    """Parses the sngl file and fills the interaction_arrays

    Parameters
    ----------
    sngl_file : str
        Path to .sngl.bed file
    sam_file : str
        Path to SAM file
    interaction_arrays : dict
        Dictionary of interaction arrays

    Returns
    -------
    None
    """
    # Get read IDs from .sngl.bed file
    read_ids = get_read_ids(sngl_file)
    # Get SAM file and parse only mapped reads
    sam_file = pysam.AlignmentFile(sam_file, "r")
    # Get intra-segment chimeras
    split_reads = get_intra_segment_chimeras(read_ids, sam_file)
    # Close SAM file
    sam_file.close()
    # Iterate over split reads
    for read_id, split_read_list in split_reads.items():
        interaction = split_read_to_interaction(split_read_list)
        if interaction[5] - interaction[2] >= min_gap:
            th.fill_heatmap(interaction, interaction_arrays, intra = True)


def main():
    """
    Main function
    """
    # Parse command line arguments
    args = docopt(__doc__)
    sngl_file = args["--sngl"]
    sam_file = args["--sam"]
    genome_file = args["--genome"]
    output_folder = args["--output"]
    sngl_file_name = os.path.basename(sngl_file)
    sngl_file_name = sngl_file_name.split(".")[0]

    # Check if output folder exists, if not create it
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Process input files
    genome_dict = hp.parse_fasta(genome_file)
    combination_arrays = {}
    combination_arrays = hp.make_combination_array(
        genome_dict, intra_only=True
    )

    # fill the interaction arrays
    segemehlSngl2heatmap(sngl_file, sam_file, combination_arrays)

    # Plot heatmaps
    ph.plot_heatmaps(combination_arrays, output_folder, colour_palette="gist_stern")

 
if __name__ == "__main__":
    main()
